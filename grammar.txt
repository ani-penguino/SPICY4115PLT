Lexical elements:
identifier    ::= [a-zA-Z_][a-zA-Z0-9_]*
number        ::= [0-9]+
bool          ::= "true" | "false"
string        ::= "\"" .*? "\""
comment       ::= "#" .*     // Single line comment

types: 
type          ::= "Int" | "Bool" | "String" | "Void"

expressions: 
expr          ::= number
                | bool
                | string
                | identifier
                | expr bin_op expr
                | "not" expr
                | "(" expr ")"
                | function_call
                | if_expr
                | loop_expr

binary operations: 
bin_op        ::= "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "and" | "or"

statements:
stmt          ::= "let" identifier "=" expr
                | "print" expr
                | function_def
                | expr

function definition and calls:
function_def  ::= "fun" identifier "(" param_list ")" "{" stmt_list "}"
param_list    ::= identifier ("," identifier)*
function_call ::= identifier "(" arg_list? ")"
arg_list      ::= expr ("," expr)*

control flow: 
if_expr       ::= "if" expr "{" stmt_list "}" ("elseif" expr "{" stmt_list "}")* ("else" "{" stmt_list "}")?
loop_expr     ::= "for" identifier "in" expr ".." expr "{" stmt_list "}"
                | "while" expr "{" stmt_list "}"
                | "do" "{" stmt_list "}" "while" expr

Blocks:
stmt_list     ::= stmt*

Program:
program       ::= stmt_list


